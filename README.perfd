Perfd
=====

Perfd is a proof-of-concept implementation of Torperf using Twisted

 - Sets up an HTTP server that serves random data for performance
   tests.

 - Periodically requests 50 KiB, 1 MiB, and 5 MiB of data from its own
   HTTP server via Tor and logs timestamps.


Howto
-----

On Debian, get Twisted core, Twisted Web:
  sudo apt-get install python-twisted-core python-twisted-web

Clone tor, compile, and install it:
  git clone https://git.torproject.org/tor.git
  cd tor/
  sudo apt-get install automake build-essential libssl-dev libevent-dev
  ./autogen.sh
  ./configure --disable-asciidoc
  make
  sudo make install
  cd ../

Clone twisted-socks and create a symbolic Link to its main source file:
  git clone https://github.com/kloesing/twisted-socks
  ln -s twisted-socks/src/socksclient.py .

Clone txtorcon and follow the instructions in its INSTALL file (copied
here for convenience):
  git clone https://github.com/meejah/txtorcon
  cd txtorcon/
  sudo apt-get install python-setuptools python-twisted python-ipaddr \
      python-geoip python-psutil graphviz
  sudo python setup.py install
  cd ../

Edit the configuration in perfd.py.  In particular, change the
'public-host' entry in server_config to the publicly reachable IP address
of your host.

Run perfd as root, dropping privileges after opening port 80 for the web
server:

  sudo PYTHONPATH=$PYTHONPATH ./perfd start

Look out for a log messages:

  tail -f perfd.log


Next steps
----------

A  Reach feature parity with current Torperf

- Use txtorcon, available at https://github.com/meejah/txtorcon, to set up
  local tor clients, configure them, and register for events.  Send
  feedback and enhancement requests to meejah using GitHub's Issues
  interface.  meejah says examples/monitor.py is a good example.

- Decide on a Twisted SOCKS client implementation and extend it to capture
  more timestamps.  Options are:
  - adapting Linus' twisted-socks that we currently use,
  - adapting Arturo's https://github.com/hellais/txsocksx which he says
    has decent test coverage and which supports v4 and v5, or
  - writing our own implementation that's loosely based on Linus' or
    Arturo's implementation, our trivsocks-client C implementation, and
    maybe tor-resolve.py in tor's contrib/.

- Add timestamps, exact byte sizes, etc. to HTTP requests.

- Add configurable request timeouts, and make sure that timed-out requests
  are logged correctly.

- Use a database, maybe SQLite, to store request timestamps and controller
  events and to provide results via the same web server that is used for
  measurements.  Either offer results in JSON format, or (preferably) in
  Torperf's key=value format.

- Make web server listen on port 80, not 8080, and drop privileges
  afterwards.


B  Make measurement results more realistic

- Integrate Will Scott's pagespeed prototype that uses Selenium/Firefox
  (not PhantomJS) available at https://github.com/willscott/pagespeed.
  meejah suspects that all we need to make this work is Twisted's
  event-based subprocess launching which txtorcon uses to launch slave
  Tors.  Will suggests to add a few time()'s to make sure that the
  timestamps Firefox reports are plausible.  Add Will as co-author when
  integrating pagespeed code.

- Ponder adding a measuring proxy between Firefox and Tor to capture more
  timestamps.  One option might be Rob van der Hoeven's Monitor In The
  Middle, available at http://freedomboxblog.nl/mitm-for-tor/, which is
  based on Twisted.  Other options might be BrowserMob, dynaTrace,
  HttpWatch, or Watir.  Special focus should be on easy of deployment.

- Run a parallel Torperf with a Firefox with the optimistic data patch.
  See #3875 for the optimistic data patch.


C  Add more performance tests

- Adopt modified guard node selection code from entrycons.py.  Consider
  re-using parts of meejah's circuit-building and stream-attaching code
  taken out in 4d8ca65.

- Add a test that runs a series of requests to track stream/circ
  allocations for #5830.  meejah says there are some decent examples in
  txtorcon's exit_scanner branch and in examples/circuit_failure_rates.py.

- Write a test that measures upload speed using HTTP POST requests for
  #7010.

- Add a performance test to a locally running hidden service.  meejah says
  that a super-simple version of this is already included in tortxcon in
  examples/launch_tor_with_hidden_service.py and that adding timing code
  would be easy.

